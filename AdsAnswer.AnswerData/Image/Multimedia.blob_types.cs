//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
// 
//     Tool     : bondc, Version=3.0.1, Build=main~empty_live.retail.not
//     Template : Microsoft.Bond.Rules.dll#Rules_Bond_CSharp.tt
//     File     : Multimedia.blob_types.cs
//
//     Changes to this file may cause incorrect behavior and will be lost when
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using global::Microsoft.Bond;
using global::System;
using global::System.Collections;
using global::System.Collections.Generic;
using global::System.Text;

namespace Multimedia
{

    /// <summary>
    /// Key
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("bondc.exe", null)]
    public partial class Key : IBondSerializable, IGenericSerializer
    {
        //
        // Fields
        //

        // 10: Required blob blobValue
        private BondBlob m_blobValue;

        /// <summary>
        /// blobValue
        /// </summary>
        public BondBlob blobValue
        {
            get { return this.m_blobValue; }
            set { this.m_blobValue = value; }
        }

        /// <summary>
        /// GetFullyQualifiedName
        /// </summary>
        public static string GetFullyQualifiedName()
        {
            return __internal.sc_structQualifiedName;
        }

        /// <summary>
        /// Meta schema.
        /// </summary>
        private static class Schema
        {
            public static readonly Metadata meta = new Metadata();
            public static readonly Metadata blobValue_meta = new Metadata();

            static Schema()
            {
                StringBuilder runtimeName = new StringBuilder();
                runtimeName.Append("Key");

                meta.name = runtimeName.ToString();
                meta.qualified_name = "Multimedia." + meta.name;


                // blobValue
                blobValue_meta.name = "blobValue";
                blobValue_meta.modifier = global::Microsoft.Bond.Modifier.Required;
            }   // ~static Schema()

        }   // ~Schema


        private static class __ordinals
        {
            public const int blobValue = 10;
        }   // ~__ordinals


        private static class __internal
        {

            public static readonly String sc_structName = Schema.meta.name;
            public static readonly String sc_structQualifiedName = Schema.meta.qualified_name;

            public const String s_blobValue = "blobValue";
        }   // ~__internal

        /// <summary>
        /// Constructor
        /// </summary>
        public Key()
        {
            Reset();
        }

        /// <summary>
        /// Reset instance and re-initialize the members.
        /// </summary>
        public virtual void Reset()
        {
            Reset(__internal.sc_structName, __internal.sc_structQualifiedName);
        }

        /// <summary>
        /// Reset
        /// </summary>
        protected void Reset(string name, string qualifiedName)
        {

            ResetImpl(name, qualifiedName);
        }

        private void ResetImpl(string name, string qualifiedName)
        {
            m_blobValue = new BondBlob();
        } // ResetImpl()

        /// <summary>
        /// Clone
        /// </summary>
        public virtual IBondSerializable Clone()
        {
            global::Multimedia.Key cloned = new global::Multimedia.Key();
            CopyTo(cloned);
            return cloned;
        }

        /// <summary>
        /// CopyTo
        /// </summary>
        public void CopyTo(global::Multimedia.Key that)
        {
            if (that == null)
            {
                throw new ArgumentNullException("that");
            }

            // 10: blob blobValue
            that.blobValue = this.blobValue.CloneData();
        }    // ~CopyTo


        /// <summary>
        /// Unmarshal
        /// </summary>
        public virtual void Unmarshal(System.IO.Stream input)
        {
            global::Microsoft.Bond.Marshaler.Unmarshal(input, this);
        }

        /// <summary>
        /// Unmarshal
        /// </summary>
        public virtual void Unmarshal(System.IO.Stream input, IBondSerializable schema)
        {
            global::Microsoft.Bond.Marshaler.Unmarshal(input, schema as SchemaDef, this);
        }

        /// <summary>
        /// Read
        /// </summary>
        public virtual void Read(global::Microsoft.Bond.IProtocolReader reader)
        {
            if (!reader.HasCapability(global::Microsoft.Bond.Protocol.Tagged))
            {
                ReadUntagged(reader);
            }
            else
            {
                bool isPartialStruct;

                if (reader.HasCapability((global::Microsoft.Bond.Protocol)global::Microsoft.Bond.ProtocolInternal.CloneableBonded))
                {
                    reader = reader.Clone();
                }

                Read(reader, out isPartialStruct);

                if (isPartialStruct)
                {
                    global::Microsoft.Bond.ReadHelper.SkipPartialStruct(reader);
                }
            }
        }

        /// <summary>
        /// Read
        /// </summary>
        public virtual void Read(global::Microsoft.Bond.IProtocolReader reader, IBondSerializable schema)
        {
            Read(ProtocolHelper.CreateReader(reader, schema));
        }

        /// <summary>
        /// ReadUntagged
        /// </summary>
        protected void ReadUntagged(global::Microsoft.Bond.IProtocolReader reader)
        {
            bool canOmitFields = reader.HasCapability(global::Microsoft.Bond.Protocol.CanOmitFields);
            Reset();


            reader.ReadStructBegin();

            if (!canOmitFields || !reader.ReadFieldOmitted())
            {
                this.blobValue = this.blobValue.FromData(global::Microsoft.Bond.ReadHelper.ReadBlob(reader, global::Microsoft.Bond.BondDataType.BT_LIST));
            }
            else
            {
                throw new BondException("Missing required field \"blobValue\", id=10");
            }
            reader.ReadStructEnd();
        }   // ~ReadUntagged()


        /// <summary>
        /// Read
        /// </summary>
        protected void Read(global::Microsoft.Bond.IProtocolReader reader, out bool isPartialStruct)
        {
            Reset();
            BitArray seenRequiredFields = new BitArray(11);

            reader.ReadStructBegin(true);

            while (true)
            {
                BondDataType type = BondDataType.BT_STOP;
                UInt16 id = UInt16.MaxValue;

                reader.ReadFieldBegin(out type, out id);

                if (type == BondDataType.BT_STOP || type == BondDataType.BT_STOP_BASE)
                {
                    isPartialStruct = (type == BondDataType.BT_STOP_BASE);
                    break;
                }

                switch (id)
                {
                    case __ordinals.blobValue:  // id=10
                        this.blobValue = global::Microsoft.Bond.ReadHelper.ReadBlob(reader, type);
                        seenRequiredFields.Set(__ordinals.blobValue, true);
                        break;
                    default:
                        reader.Skip(type);
                        break;
                } // ~switch

                reader.ReadFieldEnd();

            } // ~while

            reader.ReadStructEnd();

            CheckRequiredFieldsAreSeen(seenRequiredFields);
        }   // ~Read()


        private static void CheckRequiredFieldsAreSeen(BitArray seenFields)
        {
            string missingFieldName = null;
            UInt16 missingFieldId = UInt16.MaxValue;
            bool ok = true;

            if (ok && !seenFields.Get(__ordinals.blobValue))
            {
                ok = false;
                missingFieldName = "blobValue";
                missingFieldId = __ordinals.blobValue;
            }

            if (!ok)
            {
                throw new BondException("Missing required field \"" + missingFieldName + "\", id=" + missingFieldId);
            }
        }

        /// <summary>
        /// Marshal
        /// </summary>
        virtual public void Marshal(IProtocolWriter writer)
        {
            global::Microsoft.Bond.Marshaler.Marshal(this, writer);
        }

        /// <summary>
        /// Write
        /// </summary>
        virtual public void Write(global::Microsoft.Bond.IProtocolWriter writer)
        {
            Write(writer, true);
        }

        /// <summary>
        /// Write
        /// </summary>
        public void Write(global::Microsoft.Bond.IProtocolWriter writer, bool isTopLevel)
        {
            global::Microsoft.Bond.IProtocolWriter pass0;

            if (isTopLevel && (pass0 = writer.GetPass0Writer()) != null)
            {
                WriteInternal(pass0, isTopLevel);
                WriteInternal(writer, isTopLevel);
                writer.EndDoublePass();
            }
            else
            {
                WriteInternal(writer, isTopLevel);
            }
        }   // ~Write()

        /// <summary>
        /// Write
        /// </summary>
        virtual public void Write(global::Microsoft.Bond.IProtocolWriter writer, System.Type type)
        {
            if (type == typeof(Key))
            {
                Write(writer, true);
            }
        }

        /// <summary>
        /// WriteInternal
        /// </summary>
        protected void WriteInternal(global::Microsoft.Bond.IProtocolWriter writer, bool isTopLevel)
        {


            bool writeAllFields = !writer.MayOmitFields;

            writer.WriteStructBegin(Schema.meta, !isTopLevel, true);

            writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_LIST, __ordinals.blobValue, Schema.blobValue_meta);
            UInt32 count1 = m_blobValue.GetCount();
            writer.WriteContainerBegin(count1, BondDataType.BT_INT8);
            if (count1 != 0)
            {
                writer.WriteBlob(m_blobValue.GetData());

            }
            writer.WriteContainerEnd();
            writer.WriteFieldEnd();
            writer.WriteStructEnd(!isTopLevel);
        }   // ~Write()

        private static volatile global::Microsoft.Bond.SchemaDef __schema;

        /// <summary>
        /// GetSchema
        /// </summary>
        public virtual IBondSerializable GetSchema()
        {
            return GetRuntimeSchema();
        }

        /// <summary>
        /// GetRuntimeSchema
        /// </summary>
        static public global::Microsoft.Bond.SchemaDef GetRuntimeSchema()
        {
            if (__schema == null)
            {
                var schema = new global::Microsoft.Bond.SchemaDef();
                schema.root = GetTypeDef(schema);
                __schema = schema;
            }
            return __schema;
        }

        /// <summary>
        /// GetTypeDef
        /// </summary>
        static public global::Microsoft.Bond.TypeDef GetTypeDef(global::Microsoft.Bond.SchemaDef schema)
        {
            global::Microsoft.Bond.TypeDef type = new global::Microsoft.Bond.TypeDef();
            type.id = global::Microsoft.Bond.BondDataType.BT_STRUCT;
            type.struct_def = GetStructDef(schema);
            return type;
        }

        /// <summary>
        /// GetTypeDef
        /// </summary>
        static protected UInt16 GetStructDef(global::Microsoft.Bond.SchemaDef schema)
        {
            UInt16 pos;

            for (pos = 0; pos < schema.structs.Count; pos++)
            {
                if (schema.structs[pos].metadata.qualified_name == __internal.sc_structQualifiedName)
                {
                    return pos;
                }
            }
            // pos == schema.structs.Count

            global::Microsoft.Bond.StructDef structDef = new global::Microsoft.Bond.StructDef();
            structDef.metadata.name = __internal.sc_structName;
            structDef.metadata.qualified_name = __internal.sc_structQualifiedName;
            schema.structs.Add(structDef);

            global::Microsoft.Bond.FieldDef field;


            field = new global::Microsoft.Bond.FieldDef();
            field.id = 10;
            field.metadata.name = "blobValue";
            field.metadata.modifier = global::Microsoft.Bond.Modifier.Required;
            field.metadata.default_value.nothing = false;

            field.type.id = global::Microsoft.Bond.BondDataType.BT_LIST;
            field.type.element = new global::Microsoft.Bond.TypeDef();
            field.type.element.id = global::Microsoft.Bond.BondDataType.BT_INT8;

            structDef.fields.Add(field);

            return pos;
        }

        /// <summary>
        /// MemberwiseCompare
        /// </summary>
        public virtual bool MemberwiseCompare(object obj)
        {
            if (obj == null)
            {
                return false;
            }

            Key that = obj as Key;
            if (that == null)
            {
                return false;
            }

            return this.MemberwiseCompare(that);
        }

        /// <summary>
        /// MemberwiseCompare
        /// </summary>
        public bool MemberwiseCompare(Key other)
        {
            if (!MemberwiseCompareQuick(other))
            {
                return false;
            }

            return MemberwiseCompareDeep(other);
        }


        /// <summary>
        /// MemberwiseCompareQuick
        /// </summary>
        protected bool MemberwiseCompareQuick(Key that)
        {
            bool equals = true;

            equals = equals && (this.blobValue.GetCount() == that.blobValue.GetCount());
            return equals;
        }    // ~MemberwiseCompareQuick

        /// <summary>
        /// MemberwiseCompareDeep
        /// </summary>
        protected bool MemberwiseCompareDeep(Key that)
        {
            bool equals = true;

            equals = equals && this.blobValue.CompareData(that.blobValue);
            return equals;
        }    // ~MemberwiseCompareDeep

        /// <summary>
        /// ToString
        /// </summary>
        public override string ToString()
        {
            return ToString(false, '\n');
        }

        /// <summary>
        /// ToString
        /// </summary>
        public string ToString(bool valuesOnly, char separator)
        {
            System.Text.StringBuilder sb = new System.Text.StringBuilder();

            if (!valuesOnly)
            {
                sb.AppendFormat("{0}{1}{2}{1}", base.ToString(), separator, __internal.sc_structName);
            }

            string format = valuesOnly ? "{1}{2}" : "{0} = {1}{2}";
            sb.AppendFormat(format, __internal.s_blobValue, this.blobValue, separator);

            return sb.ToString();
        } // ToString()

    }; // class Key

    /// <summary>
    /// Value
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("bondc.exe", null)]
    public partial class Value : IBondSerializable, IGenericSerializer
    {
        //
        // Fields
        //

        // 10: Required blob blobValue
        private BondBlob m_blobValue;

        /// <summary>
        /// blobValue
        /// </summary>
        public BondBlob blobValue
        {
            get { return this.m_blobValue; }
            set { this.m_blobValue = value; }
        }

        /// <summary>
        /// GetFullyQualifiedName
        /// </summary>
        public static string GetFullyQualifiedName()
        {
            return __internal.sc_structQualifiedName;
        }

        /// <summary>
        /// Meta schema.
        /// </summary>
        private static class Schema
        {
            public static readonly Metadata meta = new Metadata();
            public static readonly Metadata blobValue_meta = new Metadata();

            static Schema()
            {
                StringBuilder runtimeName = new StringBuilder();
                runtimeName.Append("Value");

                meta.name = runtimeName.ToString();
                meta.qualified_name = "Multimedia." + meta.name;


                // blobValue
                blobValue_meta.name = "blobValue";
                blobValue_meta.modifier = global::Microsoft.Bond.Modifier.Required;
            }   // ~static Schema()

        }   // ~Schema


        private static class __ordinals
        {
            public const int blobValue = 10;
        }   // ~__ordinals


        private static class __internal
        {

            public static readonly String sc_structName = Schema.meta.name;
            public static readonly String sc_structQualifiedName = Schema.meta.qualified_name;

            public const String s_blobValue = "blobValue";
        }   // ~__internal

        /// <summary>
        /// Constructor
        /// </summary>
        public Value()
        {
            Reset();
        }

        /// <summary>
        /// Reset instance and re-initialize the members.
        /// </summary>
        public virtual void Reset()
        {
            Reset(__internal.sc_structName, __internal.sc_structQualifiedName);
        }

        /// <summary>
        /// Reset
        /// </summary>
        protected void Reset(string name, string qualifiedName)
        {

            ResetImpl(name, qualifiedName);
        }

        private void ResetImpl(string name, string qualifiedName)
        {
            m_blobValue = new BondBlob();
        } // ResetImpl()

        /// <summary>
        /// Clone
        /// </summary>
        public virtual IBondSerializable Clone()
        {
            global::Multimedia.Value cloned = new global::Multimedia.Value();
            CopyTo(cloned);
            return cloned;
        }

        /// <summary>
        /// CopyTo
        /// </summary>
        public void CopyTo(global::Multimedia.Value that)
        {
            if (that == null)
            {
                throw new ArgumentNullException("that");
            }

            // 10: blob blobValue
            that.blobValue = this.blobValue.CloneData();
        }    // ~CopyTo


        /// <summary>
        /// Unmarshal
        /// </summary>
        public virtual void Unmarshal(System.IO.Stream input)
        {
            global::Microsoft.Bond.Marshaler.Unmarshal(input, this);
        }

        /// <summary>
        /// Unmarshal
        /// </summary>
        public virtual void Unmarshal(System.IO.Stream input, IBondSerializable schema)
        {
            global::Microsoft.Bond.Marshaler.Unmarshal(input, schema as SchemaDef, this);
        }

        /// <summary>
        /// Read
        /// </summary>
        public virtual void Read(global::Microsoft.Bond.IProtocolReader reader)
        {
            if (!reader.HasCapability(global::Microsoft.Bond.Protocol.Tagged))
            {
                ReadUntagged(reader);
            }
            else
            {
                bool isPartialStruct;

                if (reader.HasCapability((global::Microsoft.Bond.Protocol)global::Microsoft.Bond.ProtocolInternal.CloneableBonded))
                {
                    reader = reader.Clone();
                }

                Read(reader, out isPartialStruct);

                if (isPartialStruct)
                {
                    global::Microsoft.Bond.ReadHelper.SkipPartialStruct(reader);
                }
            }
        }

        /// <summary>
        /// Read
        /// </summary>
        public virtual void Read(global::Microsoft.Bond.IProtocolReader reader, IBondSerializable schema)
        {
            Read(ProtocolHelper.CreateReader(reader, schema));
        }

        /// <summary>
        /// ReadUntagged
        /// </summary>
        protected void ReadUntagged(global::Microsoft.Bond.IProtocolReader reader)
        {
            bool canOmitFields = reader.HasCapability(global::Microsoft.Bond.Protocol.CanOmitFields);
            Reset();


            reader.ReadStructBegin();

            if (!canOmitFields || !reader.ReadFieldOmitted())
            {
                this.blobValue = this.blobValue.FromData(global::Microsoft.Bond.ReadHelper.ReadBlob(reader, global::Microsoft.Bond.BondDataType.BT_LIST));
            }
            else
            {
                throw new BondException("Missing required field \"blobValue\", id=10");
            }
            reader.ReadStructEnd();
        }   // ~ReadUntagged()


        /// <summary>
        /// Read
        /// </summary>
        protected void Read(global::Microsoft.Bond.IProtocolReader reader, out bool isPartialStruct)
        {
            Reset();
            BitArray seenRequiredFields = new BitArray(11);

            reader.ReadStructBegin(true);

            while (true)
            {
                BondDataType type = BondDataType.BT_STOP;
                UInt16 id = UInt16.MaxValue;

                reader.ReadFieldBegin(out type, out id);

                if (type == BondDataType.BT_STOP || type == BondDataType.BT_STOP_BASE)
                {
                    isPartialStruct = (type == BondDataType.BT_STOP_BASE);
                    break;
                }

                switch (id)
                {
                    case __ordinals.blobValue:  // id=10
                        this.blobValue = global::Microsoft.Bond.ReadHelper.ReadBlob(reader, type);
                        seenRequiredFields.Set(__ordinals.blobValue, true);
                        break;
                    default:
                        reader.Skip(type);
                        break;
                } // ~switch

                reader.ReadFieldEnd();

            } // ~while

            reader.ReadStructEnd();

            CheckRequiredFieldsAreSeen(seenRequiredFields);
        }   // ~Read()


        private static void CheckRequiredFieldsAreSeen(BitArray seenFields)
        {
            string missingFieldName = null;
            UInt16 missingFieldId = UInt16.MaxValue;
            bool ok = true;

            if (ok && !seenFields.Get(__ordinals.blobValue))
            {
                ok = false;
                missingFieldName = "blobValue";
                missingFieldId = __ordinals.blobValue;
            }

            if (!ok)
            {
                throw new BondException("Missing required field \"" + missingFieldName + "\", id=" + missingFieldId);
            }
        }

        /// <summary>
        /// Marshal
        /// </summary>
        virtual public void Marshal(IProtocolWriter writer)
        {
            global::Microsoft.Bond.Marshaler.Marshal(this, writer);
        }

        /// <summary>
        /// Write
        /// </summary>
        virtual public void Write(global::Microsoft.Bond.IProtocolWriter writer)
        {
            Write(writer, true);
        }

        /// <summary>
        /// Write
        /// </summary>
        public void Write(global::Microsoft.Bond.IProtocolWriter writer, bool isTopLevel)
        {
            global::Microsoft.Bond.IProtocolWriter pass0;

            if (isTopLevel && (pass0 = writer.GetPass0Writer()) != null)
            {
                WriteInternal(pass0, isTopLevel);
                WriteInternal(writer, isTopLevel);
                writer.EndDoublePass();
            }
            else
            {
                WriteInternal(writer, isTopLevel);
            }
        }   // ~Write()

        /// <summary>
        /// Write
        /// </summary>
        virtual public void Write(global::Microsoft.Bond.IProtocolWriter writer, System.Type type)
        {
            if (type == typeof(Value))
            {
                Write(writer, true);
            }
        }

        /// <summary>
        /// WriteInternal
        /// </summary>
        protected void WriteInternal(global::Microsoft.Bond.IProtocolWriter writer, bool isTopLevel)
        {


            bool writeAllFields = !writer.MayOmitFields;

            writer.WriteStructBegin(Schema.meta, !isTopLevel, true);

            writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_LIST, __ordinals.blobValue, Schema.blobValue_meta);
            UInt32 count1 = m_blobValue.GetCount();
            writer.WriteContainerBegin(count1, BondDataType.BT_INT8);
            if (count1 != 0)
            {
                writer.WriteBlob(m_blobValue.GetData());

            }
            writer.WriteContainerEnd();
            writer.WriteFieldEnd();
            writer.WriteStructEnd(!isTopLevel);
        }   // ~Write()

        private static volatile global::Microsoft.Bond.SchemaDef __schema;

        /// <summary>
        /// GetSchema
        /// </summary>
        public virtual IBondSerializable GetSchema()
        {
            return GetRuntimeSchema();
        }

        /// <summary>
        /// GetRuntimeSchema
        /// </summary>
        static public global::Microsoft.Bond.SchemaDef GetRuntimeSchema()
        {
            if (__schema == null)
            {
                var schema = new global::Microsoft.Bond.SchemaDef();
                schema.root = GetTypeDef(schema);
                __schema = schema;
            }
            return __schema;
        }

        /// <summary>
        /// GetTypeDef
        /// </summary>
        static public global::Microsoft.Bond.TypeDef GetTypeDef(global::Microsoft.Bond.SchemaDef schema)
        {
            global::Microsoft.Bond.TypeDef type = new global::Microsoft.Bond.TypeDef();
            type.id = global::Microsoft.Bond.BondDataType.BT_STRUCT;
            type.struct_def = GetStructDef(schema);
            return type;
        }

        /// <summary>
        /// GetTypeDef
        /// </summary>
        static protected UInt16 GetStructDef(global::Microsoft.Bond.SchemaDef schema)
        {
            UInt16 pos;

            for (pos = 0; pos < schema.structs.Count; pos++)
            {
                if (schema.structs[pos].metadata.qualified_name == __internal.sc_structQualifiedName)
                {
                    return pos;
                }
            }
            // pos == schema.structs.Count

            global::Microsoft.Bond.StructDef structDef = new global::Microsoft.Bond.StructDef();
            structDef.metadata.name = __internal.sc_structName;
            structDef.metadata.qualified_name = __internal.sc_structQualifiedName;
            schema.structs.Add(structDef);

            global::Microsoft.Bond.FieldDef field;


            field = new global::Microsoft.Bond.FieldDef();
            field.id = 10;
            field.metadata.name = "blobValue";
            field.metadata.modifier = global::Microsoft.Bond.Modifier.Required;
            field.metadata.default_value.nothing = false;

            field.type.id = global::Microsoft.Bond.BondDataType.BT_LIST;
            field.type.element = new global::Microsoft.Bond.TypeDef();
            field.type.element.id = global::Microsoft.Bond.BondDataType.BT_INT8;

            structDef.fields.Add(field);

            return pos;
        }

        /// <summary>
        /// MemberwiseCompare
        /// </summary>
        public virtual bool MemberwiseCompare(object obj)
        {
            if (obj == null)
            {
                return false;
            }

            Value that = obj as Value;
            if (that == null)
            {
                return false;
            }

            return this.MemberwiseCompare(that);
        }

        /// <summary>
        /// MemberwiseCompare
        /// </summary>
        public bool MemberwiseCompare(Value other)
        {
            if (!MemberwiseCompareQuick(other))
            {
                return false;
            }

            return MemberwiseCompareDeep(other);
        }


        /// <summary>
        /// MemberwiseCompareQuick
        /// </summary>
        protected bool MemberwiseCompareQuick(Value that)
        {
            bool equals = true;

            equals = equals && (this.blobValue.GetCount() == that.blobValue.GetCount());
            return equals;
        }    // ~MemberwiseCompareQuick

        /// <summary>
        /// MemberwiseCompareDeep
        /// </summary>
        protected bool MemberwiseCompareDeep(Value that)
        {
            bool equals = true;

            equals = equals && this.blobValue.CompareData(that.blobValue);
            return equals;
        }    // ~MemberwiseCompareDeep

        /// <summary>
        /// ToString
        /// </summary>
        public override string ToString()
        {
            return ToString(false, '\n');
        }

        /// <summary>
        /// ToString
        /// </summary>
        public string ToString(bool valuesOnly, char separator)
        {
            System.Text.StringBuilder sb = new System.Text.StringBuilder();

            if (!valuesOnly)
            {
                sb.AppendFormat("{0}{1}{2}{1}", base.ToString(), separator, __internal.sc_structName);
            }

            string format = valuesOnly ? "{1}{2}" : "{0} = {1}{2}";
            sb.AppendFormat(format, __internal.s_blobValue, this.blobValue, separator);

            return sb.ToString();
        } // ToString()

    }; // class Value
} // namespace Multimedia
